Сочиняем новую задачу (sql+api+wpf)

В этот раз пробуем разбить приложение на слои:
0) бд            (model+ef)
1) репозитории   (repository)
3) логика        (dto + functions)
4) апи           (rest api)
5) связь с апи   (httpclient)
6) представление (view)

Морской бой
Че храним в бд?
Игроки - логин, id, пароль, 18+
Игра   - 2 поля, массив - раскладка кораблей (по одному на игрока)
       - id игроков, 2 поля
       - id игры
       - статус игры - подбор противника, в процессе, закончена
       - чей ход следующий
       - время старты игры
       - время последнего хода	
       - id победителя	   
         
поле это массив 10 на 10, 0 это пустая клетка, 1 это корабль, 2 это выстрел.
1 на 4 палубы
2 на 3 палубы
3 на 2 палубы
4 на 1 палубу

0000010120
0111000100
0000010100
0000000001
0000010120
1111000100
0000010100
0000000001
0000010100
0000000001


Алгоритм работы:

    0) Авторизация или регистрация
        - login
        - registration
    1) Создание игры:
        - CreateGame - текущий игрок запоминается как создатель
        - ListGame - проверяется Status
        - ListRating - список игр, сыгранных текущим игроком со статитсткикой
        - JoinGame - обновляется Status, прописывается 2 игрок
    2) Обновление состояния игры:
        - IsGameReady - нашёлся ли второй игрок (после CreateGame) (true/false, если true - игроки собраны, можно вызывать метод IsMyTurn)   
        - IsMyTurn - передача хода, если id совпадает с id клиента - мы ходим, если idWinner не нулевой - игра завершена)
        {
            iduserNextTurn
            idWinner
            filedUser (если ход наш, то отправляем корабли)
        }
    3) Игра:
        - MakeTurn - выстрел(true/false - попал ли, если true - ходим ещё раз) Обновляет IduserNextTurn
        
    1) Создать игру или подключиться к существующей (*Просмотр за чужим матчем)
    2) Игра:
        - расставление кораблей
        - ожидание другого игрока
        - определение, кто первый ходит
        - 
    











